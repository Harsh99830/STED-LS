{
  "Concept": "Lists, Loops, Functions, Conditionals, User Input",
  "aiPrompts": {
    "contextInstructions": "You are a helpful Python programming tutor. The user is working on a Personal Finance Tracker project. Give small, chat-like responses (2-3 sentences max). Be encouraging and helpful. Don't provide complete code solutions - give hints and syntax examples instead. Focus on the current incomplete task only.",
    "fallbackHint": "üí° **Hint**: Take it step by step! Break down your problem into smaller parts. What's the first thing you need to do?",
    "welcomeMessage": "Hi! I'm here to help you with your **Personal Finance Tracker** project. What would you like help with?"
  },
  "description": "Create a menu-driven Personal Finance Tracker application that allows users to add income, add expenses, view summary, and exit the program.",
  "expectedCode": "def show_menu():\n    print(\"\\nüìä Personal Finance Tracker\")\n    print(\"1. Add Income\")\n    print(\"2. Add Expense\")\n    print(\"3. View Summary\")\n    print(\"4. Exit\")\n\nasync def add_income():\n    amount = float(await input_async(\"Enter income amount: ‚Çπ\"))\n    return amount\n\nasync def add_expense():\n    name = await input_async(\"Enter expense name: \")\n    amount = float(await input_async(\"Enter amount: ‚Çπ\"))\n    return {\"name\": name, \"amount\": amount}\n\ndef show_summary(incomes, expenses):\n    total_income = sum(incomes)\n    total_expense = sum(item[\"amount\"] for item in expenses)\n    balance = total_income - total_expense\n\n    print(\"\\nüíº Summary\")\n    print(f\"Total Income   : ‚Çπ{total_income}\")\n    print(f\"Total Expenses : ‚Çπ{total_expense}\")\n    print(f\"Balance        : ‚Çπ{balance}\")\n\n    if expenses:\n        print(\"\\nüßæ Expense Breakdown:\")\n        for e in expenses:\n            print(f\"- {e['name']}: ‚Çπ{e['amount']}\")\n\nincomes = []\nexpenses = []\n\nwhile True:\n    show_menu()\n    choice = await input_async(\"Choose an option (1-4): \")\n\n    if choice == '1':\n        incomes.append(await add_income())\n        print(\"‚úÖ Income added.\")\n    elif choice == '2':\n        expenses.append(await add_expense())\n        print(\"‚úÖ Expense added.\")\n    elif choice == '3':\n        show_summary(incomes, expenses)\n    elif choice == '4':\n        print(\"üëã Exiting. Have a good day!\")\n        break\n    else:\n        print(\"‚ùå Invalid choice. Please try again.\")",
  "id": "project1",
  "tasks": {
    "task1": {
      "codeChecks": [
        "def show_menu",
        "print",
        "Personal Finance Tracker",
        "while True",
        "input_async"
      ],
      "subtasks": [
        "Create show_menu() function",
        "Add print statements for menu options",
        "Create main while loop",
        "Call show_menu() in loop",
        "Get user input with input_async()"
      ],
      "title": "Create Menu System"
    },
    "task2": {
      "codeChecks": [
        "def add_income",
        "input_async",
        "float(",
        "return"
      ],
      "subtasks": [
        "Create add_income() function",
        "Use input_async() to get amount",
        "Convert input to float",
        "Return the amount"
      ],
      "title": "Add Income Feature"
    },
    "task3": {
      "codeChecks": [
        "def add_expense",
        "input_async",
        "return",
        "{"
      ],
      "subtasks": [
        "Create add_expense() function",
        "Get expense name with input_async()",
        "Get expense amount with input_async()",
        "Return dictionary with name and amount"
      ],
      "title": "Add Expense Feature"
    },
    "task4": {
      "codeChecks": [
        "def show_summary(",
        "sum(",
        "print"
      ],
      "subtasks": [
        "Create show_summary() function",
        "Calculate total income with sum()",
        "Calculate total expenses with sum()",
        "Display formatted summary"
      ],
      "title": "View Balance Feature"
    },
    "task5": {
      "codeChecks": [
        "incomes = []",
        "expenses = []",
        "incomes.append",
        "expenses.append"
      ],
      "subtasks": [
        "Initialize incomes list",
        "Initialize expenses list",
        "Add income to list in main loop",
        "Add expense to list in main loop"
      ],
      "title": "Data Management"
    },
    "task6": {
      "codeChecks": [
        "if choice == '1'",
        "elif choice == '2'",
        "elif choice == '3'",
        "elif choice == '4'",
        "else:",
        "Invalid choice"
      ],
      "subtasks": [
        "Handle choice == '1' (Add Income)",
        "Handle choice == '2' (Add Expense)",
        "Handle choice == '3' (View Summary)",
        "Handle choice == '4' (Exit)",
        "Handle invalid choices"
      ],
      "title": "Menu Logic Implementation"
    }
  },
  "terminalChecks": {
    "exitFunctionality": {
      "failureMessage": "‚ùå Exit functionality not tested or not working",
      "keywords": [
        "üëã Exiting. Have a good day!",
        "Exiting. Have a good day",
        "Have a good day!"
      ],
      "successMessage": "‚úÖ Exit functionality is working"
    },
    "expenseAddition": {
      "failureMessage": "‚ùå Expense addition not tested or not working",
      "keywords": [
        "Expense added",
        "expense added",
        "‚úÖ Expense added"
      ],
      "successMessage": "‚úÖ Expense addition is working"
    },
    "incomeAddition": {
      "failureMessage": "‚ùå Income addition not tested or not working",
      "keywords": [
        "Income added",
        "income added",
        "‚úÖ Income added"
      ],
      "successMessage": "‚úÖ Income addition is working"
    },
    "inputPrompts": {
      "failureMessage": "‚ùå No input prompts detected",
      "keywords": [
        "Choose an option",
        "Enter income amount",
        "Enter expense name",
        "Enter amount",
        "Enter",
        "option",
        "amount",
        "name"
      ],
      "successMessage": "‚úÖ Input prompts are working"
    },
    "menuDisplay": {
      "failureMessage": "‚ùå Menu is not displaying",
      "keywords": [
        "Personal Finance Tracker",
        "Add Income",
        "Add Expense",
        "View Summary",
        "Finance Tracker",
        "1. Add",
        "2. Add",
        "3. View",
        "4. Exit"
      ],
      "successMessage": "‚úÖ Menu is displaying correctly"
    },
    "summaryDisplay": {
      "failureMessage": "‚ùå Summary display not tested or not working",
      "keywords": [
        "üíº Summary",
        "Total Income   : ‚Çπ",
        "Total Expenses : ‚Çπ",
        "Balance        : ‚Çπ",
        "üßæ Expense Breakdown:"
      ],
      "successMessage": "‚úÖ Summary display is working"
    }
  },
  "title": "Personal Finance Tracker",
  "validationRules": {
    "requiredComponents": [
      "def show_menu()",
      "async def add_income()",
      "async def add_expense()",
      "def show_summary(",
      "while True:",
      "incomes = []",
      "expenses = []",
      "input_async(",
      "sum("
    ],
    "requiredFunctionCalls": [
      "show_menu()",
      "add_income()",
      "add_expense()",
      "show_summary("
    ],
    "requiredLogic": [
      "if choice == '1'",
      "elif choice == '2'",
      "elif choice == '3'",
      "elif choice == '4'",
      "break",
      "else:",
      "Invalid choice"
    ]
  }
}